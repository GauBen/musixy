{"mappings":"mEAyCaA,EAAcC,GACzBA,EACGC,QAAO,KAAA,SACPA,QAAO,KAAA,QACPA,QAAO,KAAA,QACPA,QAAO,KAAA,gBC9CZC,EAAiBC,KAAKC,MAAK,miCCGjBC,iBACFC,EAAQ,CAAgBC,EAAAL,QAC1BM,EAAI,aACGC,KAAYH,EAAQ,IACzBG,EAASC,OAAS,EAAC,eACjBC,EAAQF,EAAS,GACjBG,EAAOH,EAASA,EAASC,OAAS,GACxCF,GAAI,ubAIgCG,EAAME,WAAWF,EAAMG,UACzDF,EAAKC,WACGD,EAAKE,2DAETH,EAAME,WACEF,EAAMG,kEAEdF,EAAKC,WACGD,EAAKE,kEAEef,EAC9BY,EAAMI,8BACiBhB,EAAWa,EAAKG,wGAGgBC,UACvDP,EAASQ,KAAKC,GAAUA,EAAMC,YAAWC,KAAI,sFAMnDC,SAASC,cAAa,qBAAsBC,UAAYf,GAGrDgB","sources":["assets/app/app.ts","assets/playlist.json","assets/app/history.ts"],"sourcesContent":["import {Marker, Point} from './marker'\n\nexport type Playlist = Array<{\n  x: number\n  y: number\n  youtubeId: string\n  title: string\n  artist: string\n  duration: number\n}>\n\nexport type ContributionData = {\n  x: number\n  y: number\n  youtubeId: string\n  token?: string\n}\n\nexport type MakePlaylistData = {\n  from: Point\n  to: Point\n  duration: number\n  token?: string\n}\n\nexport type state = Promise<() => state>\n\nexport const listen = async <K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  eventName: K\n) =>\n  new Promise<HTMLElementEventMap[K]>((resolve) => {\n    element.addEventListener(\n      eventName,\n      (event) => {\n        resolve(event)\n      },\n      {once: true}\n    )\n  })\n\nexport const escapeHtml = (string: string) =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n\nexport abstract class App {\n  protected board: HTMLCanvasElement\n  protected marker: Marker\n\n  constructor(board: HTMLCanvasElement) {\n    this.board = board\n    this.marker = new Marker(board, {\n      x: [-1, 1],\n      y: [-1, 1],\n      width: 400,\n      height: 400,\n      pixelRatio: window.devicePixelRatio\n    })\n    this.init()\n  }\n\n  init() {\n    this.marker.clear()\n    this.marker.drawArrow({x: -0.98, y: 0}, {x: 0.98, y: 0})\n    this.marker.drawArrow({x: 0, y: -0.98}, {x: 0, y: 0.98})\n    this.marker.drawText('Sad', {x: -0.03, y: -1}, 'NW')\n    this.marker.drawText('Happy', {x: -0.08, y: 1}, 'SW')\n    this.marker.drawText('Calm', {x: -1, y: 0}, 'SE')\n    this.marker.drawText('Energetic', {x: 0.9, y: 0}, 'SW')\n  }\n\n  run() {\n    throw new Error('Unimplemented exception')\n  }\n}\n","module.exports = JSON.parse(\"[{\\\"x\\\":-0.6,\\\"y\\\":-0.55,\\\"youtubeId\\\":\\\"RbDsOdxZZ94\\\",\\\"title\\\":\\\"My Way\\\",\\\"artist\\\":\\\"Tom Walker\\\",\\\"duration\\\":237},{\\\"x\\\":-0.5,\\\"y\\\":-0.5,\\\"youtubeId\\\":\\\"cO3UI8T4O5M\\\",\\\"title\\\":\\\"Drugs\\\",\\\"artist\\\":\\\"EDEN\\\",\\\"duration\\\":339},{\\\"x\\\":-0.2,\\\"y\\\":-0.3,\\\"youtubeId\\\":\\\"hiOkMt7iJ7g\\\",\\\"title\\\":\\\"Enough\\\",\\\"artist\\\":\\\"The Tech Thieves\\\",\\\"duration\\\":202},{\\\"x\\\":0.1,\\\"y\\\":0.05,\\\"youtubeId\\\":\\\"Fxnl4L8vfKA\\\",\\\"title\\\":\\\"Kings & Queens\\\",\\\"artist\\\":\\\"Mat Kearney\\\",\\\"duration\\\":190},{\\\"x\\\":0.2,\\\"y\\\":0.2,\\\"youtubeId\\\":\\\"Z47pGUpMy-E\\\",\\\"title\\\":\\\"Wake Up\\\",\\\"artist\\\":\\\"EDEN\\\",\\\"duration\\\":280},{\\\"x\\\":0.5,\\\"y\\\":0.3,\\\"youtubeId\\\":\\\"FVFf1-oBl8c\\\",\\\"title\\\":\\\"Play Me Like A Violin\\\",\\\"artist\\\":\\\"Stephen\\\",\\\"duration\\\":233},{\\\"x\\\":0.6,\\\"y\\\":0.5,\\\"youtubeId\\\":\\\"mZE6giedL3Q\\\",\\\"title\\\":\\\"Reason\\\",\\\"artist\\\":\\\"Matthew Chaim\\\",\\\"duration\\\":201},{\\\"x\\\":0.9,\\\"y\\\":0.9,\\\"youtubeId\\\":\\\"dQw4w9WgXcQ\\\",\\\"title\\\":\\\"Never Gonna Give You Up\\\",\\\"artist\\\":\\\"Rick Astley\\\",\\\"duration\\\":212},{\\\"x\\\":0.95,\\\"y\\\":0.5,\\\"youtubeId\\\":\\\"UkkdaPxRR1k\\\",\\\"title\\\":\\\"Upload Your Mind :: Download My Soul\\\",\\\"artist\\\":\\\"Camellia\\\",\\\"duration\\\":134},{\\\"x\\\":0.4,\\\"y\\\":0.1,\\\"youtubeId\\\":\\\"-xX6aeaoHR0\\\",\\\"title\\\":\\\"Control\\\",\\\"artist\\\":\\\"Aaron Taos\\\",\\\"duration\\\":184}]\");","import {escapeHtml, Playlist} from './app'\nimport playlist from '../playlist.json'\n\nconst main = async () => {\n  const response: Playlist[] = [playlist]\n  let html = ''\n  for (const playlist of response) {\n    if (playlist.length < 2) continue\n    const first = playlist[0]\n    const last = playlist[playlist.length - 1]\n    html += `<div class=\"entry\">\n      <svg class=\"image\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"48\" height=\"48\" viewBox=\"-1.2 -1.2 2.4 2.4\" xml:space=\"preserve\" style=\"stroke-width:.1;stroke-linecap:round\">\n        <line style=\"stroke:#000;\" x1=\"-1.1\" y1=\"0\" x2=\"1.1\" y2=\"0\"/>\n        <line style=\"stroke:#000\" x1=\"0\" y1=\"-1.1\" x2=\"0\" y2=\"1.1\"/>\n        <line style=\"stroke:#f00\" x1=\"${first.x}\" y1=\"${-first.y}\" x2=\"${\n      last.x\n    }\" y2=\"${-last.y}\"/>\n        <circle style=\"stroke:#f00;fill:#fff\" cx=\"${\n          first.x\n        }\" cy=\"${-first.y}\" r=\".1\"/>\n        <circle style=\"stroke:#f00;fill:#fff\" cx=\"${\n          last.x\n        }\" cy=\"${-last.y}\" r=\".1\"/>\n      </svg>\n      <p class=\"title\">From <strong>${escapeHtml(\n        first.title\n      )}</strong> to <strong>${escapeHtml(last.title)}</strong>\n      </p>\n      <p>\n      <a href=\"http://www.youtube.com/watch_videos?video_ids=${encodeURI(\n        playlist.map((music) => music.youtubeId).join(',')\n      )}\" target=\"_blank\" rel=\"noopener\">Listen on YouTube</a>\n      </p>\n    </div>`\n  }\n\n  document.querySelector('#playlist-history').innerHTML = html\n}\n\nvoid main()\n"],"names":["$a27cc13473502718283eb3243d23c944$export$5e20d0a3120d6c07","string","replace","$579479ced6690141a806d9cff6d21d22$exports","JSON","parse","async","response","$parcel$interopDefault","html","playlist","length","first","last","x","y","title","encodeURI","map","music","youtubeId","join","document","querySelector","innerHTML","$43f2d387d9866b278e29907555cd5e4e$var$main"],"version":3,"file":"index.e61200d7.js.map"}