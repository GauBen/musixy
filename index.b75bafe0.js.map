{"mappings":"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","sources":["src/marker.ts","src/lib/html.ts","src/db.d.ts","src/home-app.ts"],"sourcesContent":["export interface MarkerSettings {\n  x: [number, number]\n  y: [number, number]\n  pixelsPerUnit: number\n  pixelRatio: number\n}\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nexport type Direction = 'NE' | 'NW' | 'SE' | 'SW'\n\nexport class Vector implements Point {\n  readonly x: number\n  readonly y: number\n\n  constructor(x: number, y: number)\n  constructor(v: Vector | Point)\n  constructor(x: number | Vector | Point, y: number | undefined = undefined) {\n    if (x instanceof Vector || (x instanceof Object && 'x' in x && 'y' in x)) {\n      this.x = x.x\n      this.y = x.y\n      return\n    }\n\n    this.x = x\n    this.y = y\n  }\n\n  static orthographicProjection(\n    startPoint: Point,\n    endPoint: Point,\n    projectile: Point\n  ) {\n    const v = new Vector(endPoint).sub(startPoint).normalize()\n    return new Vector(\n      v.scale(new Vector(projectile).sub(startPoint).dot(v))\n    ).add(startPoint)\n  }\n\n  add(v: Point) {\n    return new Vector(this.x + v.x, this.y + v.y)\n  }\n\n  sub(v: Point) {\n    return new Vector(this.x - v.x, this.y - v.y)\n  }\n\n  scale(s: number) {\n    return new Vector(this.x * s, this.y * s)\n  }\n\n  rotate(theta: number) {\n    return new Vector(\n      this.x * Math.cos(theta) - this.y * Math.sin(theta),\n      this.x * Math.sin(theta) + this.y * Math.cos(theta)\n    )\n  }\n\n  len2() {\n    return this.x * this.x + this.y * this.y\n  }\n\n  len() {\n    return Math.sqrt(this.len2())\n  }\n\n  dot(v: Point) {\n    return v.x * this.x + v.y * this.y\n  }\n\n  normalize() {\n    const length = this.len()\n    if (length < Number.EPSILON || !length) {\n      throw new Error('Division by zero')\n    }\n\n    return new Vector(this.x / length, this.y / length)\n  }\n}\n\nexport class Marker {\n  protected canvas: HTMLCanvasElement\n  protected context: CanvasRenderingContext2D\n\n  protected fromX: number\n  protected fromY: number\n  protected toX: number\n  protected toY: number\n\n  protected pixelRatio: number\n  protected pixelsPerUnit: number\n\n  constructor(\n    canvas: HTMLCanvasElement,\n    {\n      x: [fromX, toX],\n      y: [fromY, toY],\n      pixelsPerUnit,\n      pixelRatio\n    }: MarkerSettings\n  ) {\n    this.canvas = canvas\n    this.context = canvas.getContext('2d')\n\n    this.fromX = fromX\n    this.fromY = fromY\n    this.toX = toX\n    this.toY = toY\n\n    this.resize(pixelsPerUnit, pixelRatio)\n    this.clear()\n  }\n\n  resize(pixelsPerUnit: number, pixelRatio: number) {\n    this.pixelsPerUnit = pixelsPerUnit\n    this.pixelRatio = pixelRatio\n\n    this.canvas.width = (this.toX - this.fromX) * pixelsPerUnit * pixelRatio\n    this.canvas.height = (this.toY - this.fromY) * pixelsPerUnit * pixelRatio\n    this.canvas.style.width = `${(this.toX - this.fromX) * pixelsPerUnit}px`\n    this.canvas.style.height = `${(this.toY - this.fromY) * pixelsPerUnit}px`\n\n    this.context.lineWidth = 3 * pixelRatio\n  }\n\n  clear() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.context.lineJoin = 'round'\n    this.context.lineCap = 'round'\n    this.context.lineWidth = 2 * this.pixelRatio\n    this.context.fillStyle = '#000'\n    this.context.strokeStyle = '#000'\n  }\n\n  drawArrow(from: Point, to: Point) {\n    const canvasFrom = this.toCanvasVector(from)\n    const canvasTo = this.toCanvasVector(to)\n    const ctx = this.context\n    const arrow = canvasTo.sub(canvasFrom).normalize()\n    ctx.beginPath()\n    ctx.moveTo(canvasFrom.x, canvasFrom.y)\n    ctx.lineTo(canvasTo.x - arrow.x * 10, canvasTo.y - arrow.y * 10)\n    ctx.stroke()\n\n    ctx.beginPath()\n    ctx.moveTo(canvasTo.x, canvasTo.y)\n    const firstPoint = canvasTo.add(\n      arrow.scale(20 * this.pixelRatio).rotate((3 * Math.PI) / 4)\n    )\n    const secondPoint = canvasTo.add(\n      arrow.scale(20 * this.pixelRatio).rotate((5 * Math.PI) / 4)\n    )\n    ctx.lineTo(firstPoint.x, firstPoint.y)\n    ctx.lineTo(secondPoint.x, secondPoint.y)\n    ctx.closePath()\n    ctx.fillStyle = '#000'\n    ctx.fill()\n  }\n\n  drawPolyLine(\n    points: Point[],\n    color: string | CanvasGradient | CanvasPattern = null\n  ) {\n    const ctx = this.context\n\n    let canvasVector = this.toCanvasVector(points[0])\n    ctx.beginPath()\n    ctx.moveTo(canvasVector.x, canvasVector.y)\n\n    for (const point of points.slice(1)) {\n      canvasVector = this.toCanvasVector(point)\n      ctx.lineTo(canvasVector.x, canvasVector.y)\n    }\n\n    ctx.strokeStyle = color\n    ctx.stroke()\n  }\n\n  drawPoint(\n    point: Point,\n    radiusPx = 10,\n    color: string | CanvasGradient | CanvasPattern = null\n  ) {\n    const ctx = this.context\n\n    const center = this.toCanvasVector(point)\n    ctx.beginPath()\n    ctx.arc(center.x, center.y, radiusPx * this.pixelRatio, 0, 7, false)\n    ctx.fillStyle = '#fff'\n    ctx.fill()\n    ctx.strokeStyle = color\n    ctx.lineWidth = (radiusPx / 2.5) * this.pixelRatio\n    ctx.stroke()\n  }\n\n  drawCircle(\n    point: Point,\n    radius: number,\n    color: string | CanvasGradient | CanvasPattern = null\n  ) {\n    const ctx = this.context\n    const radiusPx = radius * this.pixelsPerUnit * this.pixelRatio\n    const center = this.toCanvasVector(point)\n    ctx.beginPath()\n    ctx.arc(center.x, center.y, radiusPx, 0, 7, false)\n    ctx.fillStyle = '#fff'\n    ctx.fill()\n    ctx.strokeStyle = color\n    ctx.lineWidth = 2\n    ctx.stroke()\n  }\n\n  drawText(text: string, point: Point, direction: Direction) {\n    const ctx = this.context\n    const margin = 5 * this.pixelRatio\n    const h = 20 * this.pixelRatio\n    ctx.font = `${h}px \"Segoe UI\"`\n    const vect = this.toCanvasVector(point)\n    const w = ctx.measureText(text).width\n\n    switch (direction) {\n      case 'NE':\n        ctx.fillText(text, vect.x + margin, vect.y - margin)\n        break\n\n      case 'NW':\n        ctx.fillText(text, vect.x - w - margin, vect.y - margin)\n        break\n\n      case 'SE':\n        ctx.fillText(text, vect.x + margin, vect.y + h + margin)\n        break\n\n      case 'SW':\n        ctx.fillText(text, vect.x - w - margin, vect.y + h + margin)\n        break\n\n      default:\n        throw new Error('Invalid argument for type Direction')\n    }\n  }\n\n  toCanvasVector(point: Point): Vector {\n    return new Vector(\n      (point.x - this.fromX) * this.pixelsPerUnit * this.pixelRatio,\n      (-point.y - this.fromY) * this.pixelsPerUnit * this.pixelRatio\n    )\n  }\n\n  fromCanvasPoint(point: Point): Vector {\n    return new Vector(\n      point.x / this.pixelsPerUnit + this.fromX,\n      (this.canvas.height - point.y) / this.pixelsPerUnit + this.fromY\n    )\n  }\n}\n","export const listen = async <K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  eventName: K\n) =>\n  new Promise<HTMLElementEventMap[K]>((resolve) => {\n    element.addEventListener(\n      eventName,\n      (event) => {\n        resolve(event)\n      },\n      {once: true}\n    )\n  })\n\nexport const escape = (string: string) =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n","export type Music = [string, number, number, string, string, number]\nexport type DataBase = {\n  axes: [string, string, string, string]\n  musics: Music[]\n}\n\nexport enum MusicFields {\n  YoutubeId = 0,\n  X = 1,\n  Y = 2,\n  Title = 3,\n  Artist = 4,\n  Duration = 5\n}\n","import {Vector, Marker} from './marker'\nimport {escape, listen} from './lib/html'\nimport {DataBase, Music, MusicFields} from './db.d'\n\nconst musicToVect = (music: Music) =>\n  new Vector(music[MusicFields.X], music[MusicFields.Y])\n\ntype state = Promise<() => state>\n\nexport class HomeApp {\n  /** Canvas element */\n  protected board: HTMLCanvasElement\n\n  /** 2DContext drawer */\n  protected marker: Marker\n\n  /** The duration slider */\n  protected $duration: HTMLInputElement\n\n  /** Loaded musics */\n  protected db: DataBase\n\n  constructor(board: HTMLCanvasElement) {\n    this.board = board\n    this.marker = new Marker(board, {\n      x: [-1, 1],\n      y: [-1, 1],\n      pixelsPerUnit: 200,\n      pixelRatio: window.devicePixelRatio\n    })\n  }\n\n  async run() {\n    this.setupSlider()\n\n    this.db = await (await fetch('./db.json')).json()\n\n    for (let i = 0; i < 1000; i++)\n      this.db.musics.push([\n        'l0q7MLPo-u8',\n        Math.random() * 2 - 1,\n        Math.random() * 2 - 1,\n        'The Sound of Silence',\n        'Simon & Garfunkel',\n        187\n      ])\n\n    this.init()\n\n    let state: state = this.initialState()\n    while (true) {\n      const transition: () => state = await state\n      state = transition()\n    }\n  }\n\n  setupSlider() {\n    this.$duration = document.querySelector('#duration')\n    const $tooltip = document.querySelector('#duration-tooltip')\n    $tooltip.innerHTML = `${this.$duration.value} min`\n    this.$duration.addEventListener('input', () => {\n      $tooltip.innerHTML = `${this.$duration.value} min`\n    })\n  }\n\n  init() {\n    this.marker.clear()\n    this.marker.drawArrow({x: -0.98, y: 0}, {x: 0.98, y: 0})\n    this.marker.drawArrow({x: 0, y: -0.98}, {x: 0, y: 0.98})\n    this.marker.drawText(this.db.axes[0], {x: -0.03, y: -1}, 'NW')\n    this.marker.drawText(this.db.axes[1], {x: -0.08, y: 1}, 'SW')\n    this.marker.drawText(this.db.axes[2], {x: -1, y: 0}, 'SE')\n    this.marker.drawText(this.db.axes[3], {x: 0.9, y: 0}, 'SW')\n  }\n\n  async initialState(): state {\n    const event = await listen(this.board, 'click')\n    const point: Vector = this.marker.fromCanvasPoint({\n      x: event.offsetX,\n      y: event.offsetY\n    })\n    return async () => this.state2(point)\n  }\n\n  async state2(lastPoint: Vector): state {\n    const drawArrow = (event: MouseEvent) => {\n      const point: Vector = this.marker.fromCanvasPoint({\n        x: event.offsetX,\n        y: event.offsetY\n      })\n      this.init()\n      const length = lastPoint.sub(point).len()\n      if (length >= 0.2) this.marker.drawArrow(lastPoint, point)\n      else if (length >= Number.EPSILON)\n        this.marker.drawCircle(lastPoint, length, '#000')\n    }\n\n    this.board.addEventListener('mousemove', drawArrow)\n\n    const event = await listen(this.board, 'click')\n    const point: Vector = this.marker.fromCanvasPoint({\n      x: event.offsetX,\n      y: event.offsetY\n    })\n    this.board.removeEventListener('mousemove', drawArrow)\n    if (lastPoint.sub(point).len() <= Number.EPSILON)\n      return async () => this.state2(point)\n    return async () => this.fetchPlaylist(lastPoint, point)\n  }\n\n  async fetchPlaylist(from: Vector, to: Vector): state {\n    this.init()\n    this.marker.drawArrow(from, to)\n    const duration = 60 * Number(this.$duration.value)\n    const length = to.sub(from).len()\n    const playlist =\n      length >= 0.2\n        ? this.makePathPlaylist(from, to, duration)\n        : this.makeCirclePlaylist(from, to, duration)\n\n    return async () => this.displayPlaylist(from, to, playlist)\n  }\n\n  makeCirclePlaylist(from: Vector, to: Vector, duration: number) {\n    const distances: Array<[number, Music]> = []\n    for (const music of this.db.musics) {\n      distances.push([from.sub(musicToVect(music)).len2(), music])\n    }\n\n    distances.sort((a, b) => {\n      const [p1] = a\n      const [p2] = b\n      return p2 - p1\n    })\n\n    const playlist: Music[] = []\n    while (duration > 0 && distances.length > 0) {\n      const [, music] = distances.pop()!\n      playlist.push(music)\n      duration -= music[MusicFields.Duration]\n    }\n\n    return playlist\n  }\n\n  makePathPlaylist(from: Vector, to: Vector, duration: number) {\n    const playlist: Array<[number, Music]> = []\n\n    const projections: Array<[number, Vector, Music]> = []\n\n    let firstMusic = this.db.musics[0]\n    let firstMusicDistance = from.sub(musicToVect(firstMusic)).len2()\n    let lastMusic = this.db.musics[0]\n    let lastMusicDistance = to.sub(musicToVect(lastMusic)).len2()\n\n    for (const music of this.db.musics) {\n      const v = musicToVect(music)\n      const projection = Vector.orthographicProjection(from, to, v)\n      const projectionLength2 = projection.sub(v).len2()\n      projections.push([projectionLength2, projection, music])\n\n      if (from.sub(v).len2() < firstMusicDistance) {\n        firstMusic = music\n        firstMusicDistance = from.sub(v).len2()\n      }\n\n      if (to.sub(v).len2() < lastMusicDistance) {\n        lastMusic = music\n        lastMusicDistance = to.sub(v).len2()\n      }\n    }\n\n    duration -=\n      lastMusic === firstMusic\n        ? firstMusic[MusicFields.Duration]\n        : firstMusic[MusicFields.Duration] + lastMusic[MusicFields.Duration]\n\n    projections.sort((a, b) => {\n      const [p1] = a\n      const [p2] = b\n      return p1 - p2\n    })\n\n    const sections: Array<[number, Vector, Vector]> = [\n      [to.sub(from).len2(), from, to]\n    ]\n\n    while (duration > 0 && sections.length > 0) {\n      let maxSectionLength = sections[0][0]\n      let maxSection = sections[0]\n      let maxI = 0\n      for (const [i, section] of sections.slice(1).entries()) {\n        if (section[0] > maxSectionLength) {\n          maxSection = section\n          maxSectionLength = section[0]\n          maxI = i + 1\n        }\n      }\n\n      sections.splice(maxI, 1)\n\n      const sectionFrom = maxSection[1]\n      const sectionTo = maxSection[2]\n\n      for (const [i, [, projection, music]] of projections.entries()) {\n        if (music === firstMusic || music === lastMusic) continue\n        const t =\n          projection.sub(sectionFrom).dot(sectionTo.sub(sectionFrom)) /\n          sectionTo.sub(sectionFrom).len2()\n        if (t <= 0 || t >= 1) continue\n        projections.splice(i, 1)\n        playlist.push([projection.sub(from).len2(), music])\n        duration -= music[MusicFields.Duration]\n        const section1: [number, Vector, Vector] = [\n          projection.sub(sectionFrom).len2(),\n          sectionFrom,\n          projection\n        ]\n        const section2: [number, Vector, Vector] = [\n          sectionTo.sub(projection).len2(),\n          projection,\n          sectionTo\n        ]\n        sections.push(section1, section2)\n        break\n      }\n    }\n\n    playlist.sort((a, b) => {\n      const [p1] = a\n      const [p2] = b\n      return p1 - p2\n    })\n    const realPlaylist = playlist.map((x) => {\n      const [, y] = x\n      return y\n    })\n\n    realPlaylist.unshift(firstMusic)\n    if (firstMusic !== lastMusic) realPlaylist.push(lastMusic)\n    return realPlaylist\n  }\n\n  async displayPlaylist(from: Vector, to: Vector, playlist: Music[]): state {\n    const $playlist = document.querySelector('#playlist')\n\n    if (playlist.length === 0) {\n      $playlist.innerHTML =\n        '<p class=\"user-instruction\"><strong>Error:</strong> the server created an empty playlist. Please retry later.</p>'\n      return async () => this.initialState()\n    }\n\n    let html = '<div class=\"wrapper\"><ul class=\"music-list\">'\n\n    for (const music of playlist) {\n      html += `<li class=\"item playlist-entry\">\n          <img class=\"cover\" src=\"https://i.ytimg.com/vi/${escape(\n            music[0]\n          )}/mqdefault.jpg\" alt=\"Thumbnail\" width=\"85.33\" height=\"48\">\n          <span class=\"title\">${escape(music[MusicFields.Title])}</span>\n          <span class=\"artist\">${escape(music[MusicFields.Artist])}</span>\n        </li>`\n    }\n\n    html += '</ul></div>'\n    html += `<p class=\"youtube-link\"><a href=\"http://www.youtube.com/watch_videos?video_ids=${encodeURI(\n      playlist.map((music) => music[MusicFields.YoutubeId]).join(',')\n    )}\" target=\"_blank\" rel=\"noopener\">Listen on YouTube</a></p>`\n    $playlist.innerHTML = html\n\n    return async () => this.drawPlaylist(from, to, playlist)\n  }\n\n  async drawPlaylist(from: Vector, to: Vector, playlist: Music[]): state {\n    return new Promise((resolve) => {\n      const vectors = playlist.map((music) => musicToVect(music))\n\n      const draw = (time: number) => {\n        const chain: Vector[] = []\n        let cumulatedLength = 0\n        let previous = vectors[0]\n        const dots = [previous]\n        chain.push(previous)\n\n        for (const vector of vectors.slice(1)) {\n          const delta = vector.sub(previous)\n          const length = delta.len()\n          cumulatedLength += length\n\n          if (time < cumulatedLength) {\n            chain.push(\n              previous.add(\n                delta.scale((time + length - cumulatedLength) / length)\n              )\n            )\n            break\n          }\n\n          dots.push(vector)\n          chain.push(vector)\n          previous = vector\n        }\n\n        this.init()\n        const length = from.sub(to).len()\n        if (length >= 0.2) this.marker.drawArrow(from, to)\n        else if (length >= Number.EPSILON)\n          this.marker.drawCircle(from, length, '#000')\n        this.marker.drawPolyLine(chain, '#F00')\n        for (const dot of dots) this.marker.drawPoint(dot, 4)\n        return time < cumulatedLength\n      }\n\n      let start = null\n      const frame = (t: number) => {\n        if (start === null) start = t\n        if (draw((t - start) * 0.001)) {\n          requestAnimationFrame(frame)\n        } else {\n          resolve(async () => this.initialState())\n        }\n      }\n\n      requestAnimationFrame(frame)\n    })\n  }\n}\n\nconst app = new HomeApp(document.querySelector('#board'))\nvoid app.run()\n"],"names":["$d27e883a2513b8eeb6f2043a49c6620e$export$a00f0b081d75722f","x","y","Object","startPoint","endPoint","projectile","v","sub","normalize","scale","dot","add","[object Object]","this","s","theta","Math","cos","sin","sqrt","len2","length","len","Number","EPSILON","Error","$d27e883a2513b8eeb6f2043a49c6620e$export$d9f9145a3d2de879","canvas","fromX","toX","fromY","toY","pixelsPerUnit","pixelsPerUnit1","pixelRatio","pixelRatio1","context","getContext","resize","clear","width","height","style","lineWidth","clearRect","lineJoin","lineCap","fillStyle","strokeStyle","from","to","canvasFrom","toCanvasVector","canvasTo","ctx","arrow","beginPath","moveTo","lineTo","stroke","firstPoint","rotate","PI","secondPoint","closePath","fill","points","color","canvasVector","point","slice","radiusPx","center","arc","radius","text","direction","margin","h","font","vect","w","measureText","fillText","$68aa8fbeb24221aedbaa0c8ad21d0d61$export$ff95bcce2965a200","async","element","eventName","Promise","resolve","addEventListener","event","once","$68aa8fbeb24221aedbaa0c8ad21d0d61$export$7b898e4855efaed4","string","replace","MusicFields","$d056521e609c6c8dd585a17aed2c9f50$export$512e94db3067f2de","$bcfef3000e103e68c368d295fb5567ea$var$musicToVect","music","X","Y","board","marker","window","devicePixelRatio","setupSlider","db","fetch","json","i","musics","push","random","init","state","initialState","$duration","document","querySelector","$tooltip","innerHTML","value","drawArrow","drawText","axes","fromCanvasPoint","offsetX","offsetY","state2","lastPoint","drawCircle","removeEventListener","fetchPlaylist","duration","playlist","makePathPlaylist","makeCirclePlaylist","displayPlaylist","distances","sort","a","b","p1","p2","music1","pop","Duration","projections","firstMusic","firstMusicDistance","lastMusic","lastMusicDistance","projection","orthographicProjection","projectionLength2","sections","maxSectionLength","maxSection","maxI","section","entries","splice","sectionFrom","sectionTo","i1","t","section1","section2","realPlaylist","map","unshift","$playlist","html","Title","Artist","encodeURI","YoutubeId","join","drawPlaylist","vectors","draw","time","chain","cumulatedLength","previous","dots","vector","delta","drawPolyLine","drawPoint","start","frame","requestAnimationFrame","run"],"version":3,"file":"index.b75bafe0.js.map"}